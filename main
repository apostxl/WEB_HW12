from fastapi import FastAPI, HTTPException, Depends
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from pydantic import BaseModel
from passlib.context import CryptContext
from datetime import datetime, timedelta
import jwt

app = FastAPI()

class User(BaseModel):
    id: int
    email: str
    password: str

fake_users_db = {
    1: User(id=1, email="test@example.com", password="$2b$12$30yH3gFYKQWxAGU88Nk7Xe1r4AHTT6Gcyk0E/BZpnzU0/Kos1r6um")  # Пароль: testpassword
}

SECRET_KEY = "your_secret_key"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

def get_password_hash(password):
    return pwd_context.hash(password)

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_user(email: str):
    for user in fake_users_db.values():
        if user.email == email:
            return user
    return None

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def create_access_token(data: dict, expires_delta: timedelta):
    to_encode = data.copy()
    expire = datetime.utcnow() + expires_delta
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

def authenticate_user(email: str, password: str):
    user = get_user(email)
    if not user or not verify_password(password, user.password):
        return False
    return user

def create_access_token(email: str):
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": email}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

@app.post("/register/")
async def register_user(email: str, password: str):
    if get_user(email):
        raise HTTPException(status_code=409, detail="User already registered")
    hashed_password = get_password_hash(password)
    user_id = max(fake_users_db.keys()) + 1
    new_user = User(id=user_id, email=email, password=hashed_password)
    fake_users_db[user_id] = new_user
    return new_user

@app.post("/token/")
async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):
    user = authenticate_user(form_data.username, form_data.password)
    if not user:
        raise HTTPException(status_code=401, detail="Invalid credentials")
    access_token = create_access_token(user.email)
    return {"access_token": access_token, "token_type": "bearer"}

@app.get("/users/me/")
async def read_users_me(current_user: User = Depends(get_current_user)):
    return current_user
